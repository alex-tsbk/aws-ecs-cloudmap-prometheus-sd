{
  "DiscoveryOptions": {
    // Semicolon separated string of ECS clusters to include.
    // At least one must be provided.
    "EcsClusters": "adsbx-identity-dev;",
    // Semicolon separated string of regexes to match ECS service names.
    // Service are matched against services without the AWS CloudMap Namespace.
    "EcsServiceMatcherRegexes": ".*;",
    // Semicolon separated string of CloudMap namespaces to limit to.
    // When provided, limits discovery of services only to the namespaces defined.
    // If none provided, all CloudMap namespaces that ECS clusters interact with will be included.
    "CloudMapNamespaces": "",
    // Semicolon separated string of regexes to match CloudMap service names.
    // Service are matched against services without the AWS CloudMap Namespace.
    "CloudMapServiceMatcherRegexes": ".*;",
    // Controls which tags are included in the service discovery response as metadata.
    // Because metadata labels are dictionary keys, they must be unique. Therefore, tags
    // are resolved in the following priority:
    // Cloud Map Service > Cloud Map Namespace > ECS Task > ECS Service
    "EcsServiceTagsRegex": "",
    // Note: tags are resolved from running tasks, not tasks definitions.
    "EcsTaskTagsRegex": "",
    "CloudMapNamespaceTagsRegex": "",
    "CloudMapServiceTagsRegex": "",
    // Semicolon separated string of labels to include in the service discovery response as metadata.
    // Will be added to all discovered targets.
    // For example, "environment=dev;region=us-west-2"
    // If value needs to have a semicolon, or equals sign, it must be prefixed using %.
    // For example, "eval_expression=a%=%=b;components=a%;b%;;"
    // would be parsed as "eval_expression=a==b;components=a;b;"
    // Any label that is not a valid Prometheus label will be transformed to such.
    // Read more: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#labelname
    "ExtraPrometheusLabels": "",
    // Specifies the TTL for the cache of service discovery results.
    // Set to 0 to disable caching (request to AWS will be made upon every http request).
    "CacheTtlSeconds": 60
  },
  "AWS": {
    "Region": "us-west-2"
  },
  "Serilog": {
    "MinimumLevel": {
      "Default": "Debug",
      "Override": {
        "Microsoft": "Warning",
        "Microsoft.AspNetCore.HttpLogging.HttpLoggingMiddleware": "Information",
        "System": "Warning",
        "Amazon": "Warning"
      }
    },
    "WriteTo": [
      {
        "Name": "Console",
        "Args": {
          "outputTemplate": "{Timestamp:yyyy-MM-dd HH:mm:ss.fff zzz} [{Level:u3}] {Message:lj}{NewLine}{Exception}"
        }
      }
    ]
  },
  "AllowedHosts": "*"
}
